# !/usr/bin/env python3
# Generated by Proteus Visual Designer for Raspberry Pi

# Modules
from time import sleep
from wiringpi import Serial
import RPi.GPIO as GPIO
import ports
import PrintList
from time import*
import requests
import math
import random
    
TOKEN = "BBFF-6em5J4dgyWXYSCQXHrSRzhw4FlFreW"  # Put your TOKEN here
DEVICE_LABEL = "proyectoembebidos2021dev"  # Put your device label here 
VARIABLE_LABEL_1 = "Potencia1"  # Put your first variable label here
VARIABLE_LABEL_2 = "Potencia2"  # Put your second variable label here
VARIABLE_LABEL_3 = "Potencia3"  # Put your second variable label here
VARIABLE_LABEL_4 = "Potencia4"
VARIABLE_LABEL_5 = "Potencia5"

baud = 9600
ser  = Serial("/dev/serial0",baud)
sleep(0.3)


def recibir(echo = True):
 data = ""
 while True:
  input = ser.getchar()
  if echo:
   ser.putchar(input)
  if input == "\r":
   return (data)
  data += input
 sleep(0.2)
  
def printsln(menss):
 for c in menss:
  ser.putchar(c)
  sleep(0.001)
 ser.putchar("\r")
 sleep(0.001)


def prints(menss):
 for c in menss:
  ser.putchar(c)
  sleep(0.001)
  
  
def build_payload(variable_1, variable_2, variable_3,variable_4,variable_5,k):
    # Creates two random values for sending data
    #valores= mm.split('&');
    value_1 = k[0]
    value_2=  k[1]
    value_3= k[2]
    value_4= k[3]
    value_5= k[4]

    print ("CONECTADO...")  
    

    # Creates a random gps coordinates
 
    payload = {variable_1: value_1,
              variable_2: value_2,
              variable_3: value_3,
	      variable_4:value_4,
	      variable_5:value_5
	      }

    return payload

def build_payload2(variable_2,mm):
    # Creates two random values for sending data
    #valores= mm.split('&');
    value_2 = mm [0:2]

    print ("CONECTADO...")  
    

    # Creates a random gps coordinates
 
    payload = {variable_2: value_2}

    return payload
 
def build_payload3(variable_3,mm):
    # Creates two random values for sending data
    #valores= mm.split('&');
    value_3= mm [0:2]

    print ("CONECTADO...")  
    

    # Creates a random gps coordinates
 
    payload = {variable_3: value_3}

    return payload
    
def build_payload4(variable_4,mm):
    # Creates two random values for sending data
    #valores= mm.split('&');
    value_4 = mm [0:2]

    print ("CONECTADO...")  
    

    # Creates a random gps coordinates
 
    payload = {variable_4: value_4}

    return payload    
    
    
def post_request(payload):
    # Creates the headers for the HTTP requests
    url = "http://industrial.api.ubidots.com"
    url = "{}/api/v1.6/devices/{}".format(url, DEVICE_LABEL)
    headers = {"X-Auth-Token": TOKEN, "Content-Type": "application/json"}

    # Makes the HTTP requests
    status = 400
    attempts = 0
    while status >= 400 and attempts <= 5:
        req = requests.post(url=url, headers=headers, json=payload)
        status = req.status_code
        print(status)
        print(attempts)
        attempts += 1
        sleep(1)

    # Processes results
    if status >= 400:
        print("[ERROR] Could not send data after 5 attempts, please check \
            your token credentials and internet connection")
        return False

    print("[INFO] request made properly, your device is updated")
    return True
 

def post_request2(payload):
    # Creates the headers for the HTTP requests
    url = "http://industrial.api.ubidots.com"
    url = "{}/api/v1.6/devices/{}".format(url, DEVICE_LABEL)
    headers = {"X-Auth-Token": TOKEN, "Content-Type": "application/json"}

    # Makes the HTTP requests
    status = 400
    attempts = 0
    while status >= 400 and attempts <= 5:
        req = requests.post(url=url, headers=headers, json=payload)
        status = req.status_code
        attempts += 1
        sleep(1)

    # Processes results
    if status >= 400:
        print("[ERROR] Could not send data after 5 attempts, please check \
            your token credentials and internet connection")
        return False

    print("[INFO] request made properly, your device is updated")
    return True

# Main function
def main () :
# Infinite loop
  while True :
   #mm=recibir(True)
   #k=mm.split(" ")
   #print("Aqui va K")
   #print(k)
   #VARIABLES=[VARIABLE_LABEL_1,VARIABLE_LABEL_2,VARIABLE_LABEL_3,VARIABLE_LABEL_4,VARIABLE_LABEL_5]
   #for e in VARIABLES:
     
      #if i==0: 
         mm=recibir(True)
         k=mm.split("  W ")
         print(k)
         payload = build_payload(VARIABLE_LABEL_1,VARIABLE_LABEL_2,VARIABLE_LABEL_3,VARIABLE_LABEL_4,VARIABLE_LABEL_5, k)
         print("[INFO] Attemping to send data")
         post_request(payload)
         print("[INFO] finished")
         #print(k[1])
         #print(VARIABLES)
         k=[ ] 
         #mm=""
         sleep(10)

     

# Command line execution
if __name__ == '__main__' :
 main()